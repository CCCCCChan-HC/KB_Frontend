name: Auto Release Dev Build

on:
  push:
    branches: [ develop, dev ]
    paths:
      - 'app/**'
      - 'src/**'
      - 'package.json'
      - 'Dockerfile.dev'
      - 'next.config.js'
      - 'server.js'
  
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Dev version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch  # v0.0.1-dev -> v0.0.2-dev
          - minor  # v0.0.1-dev -> v0.1.0-dev
          - major  # v0.0.1-dev -> v1.0.0-dev

jobs:
  auto-release-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest dev tag
      id: get_tag
      run: |
        # 获取最新的dev标签，如果没有则从v0.0.0-dev开始
        LATEST_TAG=$(git tag -l "*-dev" | sort -V | tail -n1 || echo "v0.0.0-dev")
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0-dev"
        fi
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest dev tag: $LATEST_TAG"
    
    - name: Calculate next dev version
      id: next_version
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
        
        # 移除v前缀和-dev后缀
        VERSION=${LATEST_TAG#v}
        VERSION=${VERSION%-dev}
        
        # 分割版本号
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # 根据类型增加版本号
        case $VERSION_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH-dev"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Next dev version: $NEW_VERSION"
    
    - name: Create and push dev tag
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$NEW_VERSION" -m "Auto dev release $NEW_VERSION"
        git push origin "$NEW_VERSION"
    
    - name: Create Dev Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.new_version }}
        release_name: Dev Release ${{ steps.next_version.outputs.new_version }}
        body: |
          ## 🚧 开发版本 ${{ steps.next_version.outputs.new_version }}
          
          > ⚠️ **这是开发版本，仅用于测试和开发环境**
          
          ### 📦 开发环境Docker镜像
          - 开发镜像文件已自动构建并上传到此Release
          - 下载后使用: `docker load -i kb-frontend-dev-${{ steps.next_version.outputs.new_version }}.tar`
          - 运行命令: `docker run -p 3000:3000 kb-frontend-dev:${{ steps.next_version.outputs.new_version }}`
          
          ### 🔧 开发环境特性
          - 热重载支持
          - 开发工具集成
          - 详细错误信息
          - 调试模式启用
          
          ### 🔄 变更内容
          此开发版本包含了最新的开发分支更新。
          
          ---
          *此开发版Release由GitHub Actions自动创建*
        draft: false
        prerelease: true  # 标记为预发布版本
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Dev Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: false
        tags: kb-frontend-dev:${{ steps.next_version.outputs.new_version }}
        outputs: type=docker,dest=/tmp/kb-frontend-dev.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Upload Dev Docker image to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/kb-frontend-dev.tar
        asset_name: kb-frontend-dev-${{ steps.next_version.outputs.new_version }}.tar
        asset_content_type: application/x-tar