# HTTPS 开发环境配置示例
# 复制此文件为 .env.local 并根据需要修改配置

# APP ID: Dify 应用的唯一标识符
# 可在应用详情页面 URL 中找到，例如：https://cloud.dify.ai/app/xxx/workflow 中的 xxx
NEXT_PUBLIC_APP_ID=

# APP API Key: Dify 应用的 API 密钥
# 在应用的"API 访问"页面点击右上角"API Key"按钮生成
NEXT_PUBLIC_APP_KEY=

# API URL: Dify API 的基础 URL
# 如果使用 Dify 云服务，设置为：https://api.dify.ai/v1
NEXT_PUBLIC_API_URL=http://192.168.50.70/v1

# CAS 配置
# 客户端使用（带NEXT_PUBLIC_前缀）- 浏览器访问
NEXT_PUBLIC_CAS_BASE_URL=http://192.168.50.178:8443/cas
# 注意：开发环境下使用 HTTPS，需要更新为 https://localhost:3000
NEXT_PUBLIC_CAS_SERVICE_URL=https://localhost:3000/login

# 服务器端使用（无前缀）- 容器内访问
CAS_BASE_URL=http://192.168.50.178:8443/cas
CAS_SERVICE_URL=https://localhost:3000/login

# NextAuth 配置
# 注意：开发环境下使用 HTTPS，需要更新为 https://localhost:3000
NEXTAUTH_URL=https://localhost:3000
NEXTAUTH_SECRET=your_nextauth_secret_key

# 环境设置
NODE_ENV=development

# HTTPS 配置（开发环境）
# 启用 HTTPS
HTTPS=true

# SSL 证书文件路径（相对于项目根目录）
SSL_CERT_FILE=./certs/server.crt
SSL_KEY_FILE=./certs/server.key

# SSL 域名（可选，默认为 localhost）
SSL_DOMAIN=localhost

# 服务器端口（可选，默认为 3000）
PORT=3000

# 开发环境 HTTPS 使用说明：
# 1. 运行 scripts\generate-certs.bat 生成自签名证书
# 2. 使用 npm run dev:https 启动 HTTPS 开发服务器
# 3. 访问 https://localhost:3000
# 4. 首次访问时接受浏览器的安全警告